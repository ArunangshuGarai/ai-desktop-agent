// src/utils/deepseek.js - Enhanced for vision tasks and more robust JSON handling
const { OpenAI } = require('openai');
require('dotenv').config();

class DeepseekClient {
  constructor() {
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    if (!apiKey) {
      console.error('OPENROUTER_API_KEY not found in environment variables');
      throw new Error('OPENROUTER_API_KEY not configured');
    }
    
    this.client = new OpenAI({
      baseURL: 'https://openrouter.ai/api/v1',
      apiKey: apiKey
    });
  }
  
  async generateCompletion(prompt, options = {}) {
    try {
      const messages = Array.isArray(prompt) ? prompt : [{ role: "user", content: prompt }];
      
      console.log("Sending prompt to API:", messages[0].content.substring(0, 100) + "...");
      
      const completion = await this.client.chat.completions.create({
        model: 'deepseek/deepseek-r1:free',
        messages: messages,
        extra_headers: {
          "HTTP-Referer": "https://ai-desktop-agent.com", 
          "X-Title": "AI Desktop Agent"
        },
        extra_body: {},
        ...options
      });
      
      const responseText = completion.choices[0].message.content;
      console.log("API Response:", responseText.substring(0, 200) + "...");
      
      return responseText;
    } catch (error) {
      console.error('Error calling DeepSeek API:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * Generate JSON using DeepSeek API with enhanced error handling
   */
  async generateJSON(prompt, options = {}) {
    try {
      // Add specific instructions for JSON format
      const jsonPrompt = `${prompt}

VERY IMPORTANT: 
- Your response must ONLY include a valid JSON object with no additional text before or after
- Do not include markdown formatting, comments, or explanations
- Do not use triple backticks or json language specifiers
- The response must be parseable by JSON.parse() without any preprocessing`;
      
      const response = await this.generateCompletion(jsonPrompt, {
        temperature: 0.1, // Lower temperature for more deterministic JSON output
        ...options
      });
      
      console.log("Raw API response:", response.substring(0, 200) + (response.length > 200 ? "..." : ""));
      
      return this.extractAndParseJSON(response);
    } catch (error) {
      console.error('Error generating JSON:', error);
      throw error;
    }
  }

  /**
   * Enhanced JSON extraction from API response with multiple fallback approaches
   */
  extractAndParseJSON(apiResponse) {
    // Try multiple approaches to extract valid JSON
    let jsonStr = apiResponse.trim();
    let result = null;
    let parseError = null;
    
    // Approach 1: Try parsing directly first
    try {
      result = JSON.parse(jsonStr);
      return result;
    } catch (error) {
      parseError = error;
      console.log("Direct JSON parsing failed, trying alternatives...");
    }
    
    // Approach 2: Look for JSON block in markdown code blocks
    const jsonBlockMatch = apiResponse.match(/```(?:json)?\s*([\s\S]*?)```/);
    if (jsonBlockMatch && jsonBlockMatch[1]) {
      jsonStr = jsonBlockMatch[1].trim();
      try {
        result = JSON.parse(jsonStr);
        return result;
      } catch (error) {
        console.log("Code block JSON parsing failed...");
      }
    }
    
    // Approach 3: Look for object-like structure with braces
    const bracesMatch = apiResponse.match(/(\{[\s\S]*\})/);
    if (bracesMatch && bracesMatch[1]) {
      jsonStr = bracesMatch[1].trim();
      try {
        result = JSON.parse(jsonStr);
        return result;
      } catch (error) {
        console.log("Braces extraction JSON parsing failed...");
      }
    }
    
    // Approach 4: Look for array-like structure with brackets
    const bracketsMatch = apiResponse.match(/(\[[\s\S]*\])/);
    if (bracketsMatch && bracketsMatch[1]) {
      jsonStr = bracketsMatch[1].trim();
      try {
        result = JSON.parse(jsonStr);
        return result;
      } catch (error) {
        console.log("Brackets extraction JSON parsing failed...");
      }
    }
    
    // Approach 5: Try to fix common JSON syntax errors
    // Handle cases like unquoted property names and single quotes
    try {
      // Replace single quotes with double quotes (but not within double quotes)
      let fixedStr = jsonStr;
      
      // Try to add double quotes to unquoted property names
      fixedStr = fixedStr.replace(/(\s*)(\w+)(\s*):(\s*)/g, '$1"$2"$3:$4');
      
      // Convert single quotes to double quotes where appropriate
      fixedStr = fixedStr.replace(/'([^']*)'(\s*:)/g, '"$1"$2');
      fixedStr = fixedStr.replace(/:\s*'([^']*)'/g, ': "$1"');
      
      result = JSON.parse(fixedStr);
      return result;
    } catch (error) {
      console.log("JSON syntax fixing failed too...");
    }

    // If all parsing attempts failed, create a basic structured error response
    console.error("Could not parse JSON. Original error:", parseError);
    console.error("Response text:", apiResponse);
    
    // Return a minimal fallback object with error info
    return {
      error: "Failed to parse JSON response",
      apiResponsePreview: apiResponse.substring(0, 200) + (apiResponse.length > 200 ? "..." : ""),
      fallback: true
    };
  }
  
  /**
   * Analyze visual content using DeepSeek API
   */
  async analyzeScreenshot(screenshotText, task, options = {}) {
    try {
      const prompt = `
        Analyze this screenshot text and help me understand what I'm looking at and what should be done next.
        
        Screenshot text content:
        ${screenshotText}
        
        My current task: 
        "${task}"
        
        Provide:
        1. What application is visible
        2. What state it's in (with any relevant details)
        3. What UI elements I could interact with
        4. What should be my next action to advance this task
        
        Return a JSON object with this information.
      `;
      
      return await this.generateJSON(prompt, options);
    } catch (error) {
      console.error('Error analyzing screenshot:', error);
      throw error;
    }
  }
  
  /**
   * Generate Python code for a specific task
   */
  async generatePythonCode(task, options = {}) {
    try {
      const prompt = `
        Write clean, efficient Python code for the following task:
        "${task}"
        
        The code should:
        - Be well-documented with comments
        - Include appropriate error handling
        - Be ready to run without modifications
        - Use standard libraries where possible
        
        Return ONLY the Python code without any explanation or markdown formatting.
      `;
      
      const codeResponse = await this.generateCompletion(prompt, {
        temperature: 0.2,
        ...options
      });
      
      // Clean any markdown formatting
      let cleanCode = codeResponse;
      const codeBlockRegex = /```python\s*([\s\S]*?)```/;
      const match = codeResponse.match(codeBlockRegex);
      if (match && match[1]) {
        cleanCode = match[1].trim();
      } else {
        // Remove any other markdown code block markers if present
        cleanCode = cleanCode.replace(/```.*\n/g, '').replace(/```/g, '').trim();
      }
      
      return cleanCode;
    } catch (error) {
      console.error('Error generating Python code:', error);
      throw error;
    }
  }
  
  /**
   * Handle vision-based task planning
   */
  async planVisionBasedTask(task, screenState) {
    try {
      const prompt = `
        I need to execute this task using vision-based interactions with the desktop:
        "${task}"
        
        Current screen state description:
        ${screenState}
        
        Break down this task into concrete steps where I should:
        1. Look for specific visual elements
        2. Take specific actions (click, type, etc.)
        3. Verify each step was successful
        
        Return a JSON object with the detailed steps.
      `;
      
      return await this.generateJSON(prompt);
    } catch (error) {
      console.error('Error planning vision-based task:', error);
      throw error;
    }
  }
}

module.exports = new DeepseekClient();